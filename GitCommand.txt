1.用户信息
配置个人的用户名称和电子邮件地址：

git config --global user.name  "用户名"

git config --global user.email "邮箱"

如果使用了--global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后所有的项目都会默认使用这里配置的用户信息。
如果要在某个特定的项目中使用其他名字或者电邮，只要去掉--global选项重新配置即可，新的设定保存保存在当前目录的.git/config文件里。


2.文本编辑器
设置Git默认使用的文本编辑器，一般可能会是Vi或者Vim。如果你有其他偏好，比如Emacs的话，可以重新设置：
git config --global core.editor emacs

3.差异分析工具
还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用vimdiff的话：
git config --global merege.tool vimdiff

Git可以理解kdiff3,tkdiff,meld,xxdiff,merege,vimdiff,gvimdiff,ecmerge,和opendiff等合并工具的输出信息。也可以指定使用自己开发的工具。

4.查看配置信息
git config --list

也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：
git config user.name

基本概念：
工作区：就是你电脑里能看到的目录。
暂存区：英文叫stage，或index。一般存放在“.git目录下”下的index文件(.git/index)中，所以我们把暂存区有时也叫作索引(index).
版本库：工作区有一个隐藏目录.git,这个不算工作区，而是Git的版本库。

Git创建仓库：
1.git init 
(1)使用当前目录作为Git仓库，我们只需要使它初始化。
git init	该命令执行完后会在当前目录生成一个.git目录。

(2)使用我们指定的目录作为Git仓库
git init newrepo	初始化后，会在newrepo目录下出现一个名为.git的目录，所有Git需要的数据和资源都存放在这个目录中。

(3)如果当前目录下有几个文件想要纳入版本控制，需要先用git add命令告诉Git开始对这些文件进行跟踪，然后哦，提交：
git add *.c
git add README
git commit -m '初始化项目版本库'
以上命令将目录下以.c结尾及README文件提交到仓库中。

2.git clone
(1)克隆仓库的命令格式为：
git clone <repo>
(2)克隆到指定的目录，可以使用以下命令：
git clone <repo> <directory>	参数说明：repo:Git仓库.directory:本地目录。

3.git status
查看上次提交之后是否有修改

(1)尚未缓存的改动：git diff
(2)查看已缓存的改动：git diff --cached
(3)查看已缓存的与未缓存的所有改动：git diff HEAD
(4)显示摘要而非整个 diff: git diff --stat

4.git commit
使用git add 命令将想要快照的内容写入缓存区，而执行git commit 将缓存区内容加到仓库中。

如果觉得git add 提交缓存的流太过繁琐，Git也允许用-a选项跳过这一步。 git commit -add


5.git reset HEAD
git reset HEAD 命令用于取消已缓存的内容。

6.git rm
如果只是简单地从工作目录中手工删除文件，运行git status时就会在changes not staged for commit的提示。
(1)要从Git中移除某个文件，就必须要从已跟踪文件清单中移除，然后提交。
git rm <file>
(2)如果要删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项-f
git rm -f <file>
(3)如果把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，使用--cached选项即可
git rm --cached <file>

7.git mv
git mv 命令用于移动或重命名一个文件、目录、软连接。

git mv README README.md

Git分支管理
几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着可以从开发主线上分离开来，然后在不影响主线的同时继续工作。

8.创建分支命令：
git branch (branchname)

9.切换分支命令：
git checkout (branchname)
当切换分支的时候，Git会用该分支的最后提交的快照替换你的工作目录的内容，所以多个分支不需要多个目录。
10.合并分支的命令：
git merge
可以多次合并到统一分支，也可以选择在合并之后直接删除被并入的分支。

11.列出分支
(1)列出分支的基本命令：
git branch
没有参数时，git branch 会列出你在本地的分支

当执行git init 的时候，默认情况下Git会为你创建master分支。

可以使用git checkout -b(branchname)命令来创建新分支并立即切换到该分支下，从而在该分支中操作。

12.删除分支
(1)删除分支命令：
git branch -d (branchname)

(2)合并冲突：
合并并不仅仅是简单的文件添加、移除的操作，Git也会合并修改。


13.Git查看提交历史
使用git log 命令列出历史提交记录
可以用--online选项来查看历史记录的简洁版本。
可以用--graph选项，查看历史中什么时候出现了分支、合并。
可以用--reverse参数来逆向显示所有日志。

如果只查找指定用户的提交日志可以用： git log --author



Git标签
如果你达到一个重要的阶段，并希望永远记住那个特别地1提交快照，可以使用git tag -a v1.0命令给最新一次提交打上（HEAD）"v1.0"的标签。

git tag 查看所有标签


Git 远程仓库

添加远程仓库： git remote add [shortname] [url]

生成SSH Key:
ssh-keygen  -t rsa -C "邮箱"

提取远程仓库
14.从远程仓库下载新的分支与数据：
git fetch
该命令执行完后需要执行git meerge 远程分支到你所在的分支。

15.从远端仓库提取数据并尝试合并到当前分支：
git merge
该命令就是在执行git fetch 之后紧接着执行git merge远程分支到你所在的任意分支。

假设你一配置好了一个远程仓库，并且你想要提取更新数据，你可以首先执行git fetch [alias]告诉Git去获取它有你没有的数据，
然后你可以执行git merge[alias]/[branch]已将服务器上的任何更新（假设有人这时侯推送到服务器了）合并到你的当前分支。

推送到远程仓库
16.推送新的分支与数据到某个远端仓库命令：
git push [alias] [branch]

以上命令将你的[branch]分支推送成为[alias]远程仓库上的[branch]分支。

删除远程仓库
17.删除远程仓库
git remote rm [别名]











